// ------------------ Initial conditions and initial data START
// CONTROL PARAMETERS:
// 1.1) Id_strong_1 - ID of the row of control parameters of sensors
// 1.2) On_tamp_upr - Turning on/off temperature measurements
// 1.3) On_sound_upr - Turning on/turning off sound measurements
// 1.4) On_light_upr - Turning on/off light measurements
// 1.5) On_vibr_upr - Turning on/off vibration measurements
// 1.6) Per_tem_vl_upr - The period of temperature and humidity measurement control
// 1.7) Per_svuk_upr - The period of sound measurement control
// 1.8) Per_svet_upr - The period of measurement of light control
// 1.9) Per_vibr_upr - The period of measurement of vibration control
// 1.10) Per_vseh_upr - The period of measurement of all sensors control
// 1.11) String_1 - The string of control parameters of sensors

// Test string for connecting a temperature and humidity sensor: 1;1;0;0;0;2;0;0;0;0;
// Test string for connecting the sound sensor:                   1;0;1;0;0;0;2;0;0;0;
// Test string for connecting the light sensor:                   1;0;0;1;0;0;0;2;0;0;
// Test string for connecting the vibration sensor:                1;0;0;0;1;0;0;0;2;0;
// Test string for connecting all sensors: 1;1;1;1;1;0;0;0;0;2;

// Test string for connecting the servo:                    2;1;1;1;1;0;


// Id_strok_1 = 1
// On_tamp_upr = {0;1}
// On_sound_upr = {0;1}
// On_svet_upr = {0;1}
// On_vibr_upr = {0;1}

// Row of sensor control parameters:
// 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10
// Ид_строки_1;Вкл_темп_упр;Вкл_звук_упр;Вкл_свет_упр;Вкл_вибр_упр;Пер_тем_вл_упр;Пер_звук_упр;Пер_свет_упр;Пер_вибр_упр;Пер_всех_упр;

// 2.1) Id_string_2 - ID of the row of servo control parameters
// 2.2) On_serv_upr - Turning on/off the servo
// 2.3) Nach_p_serv_upr - The initial position of the servo control
// 2.4) Eg_pr_upr - The direction of rotation of the servo from the initial position control
// 2.5) Ug_pov_upr - The angle of rotation of the servo control
// 2.6) Skor_vr_upr - The speed of rotation of the servo managing
// 2.7) Line_2 - A string of servo control parameters

// Id_strok_2 = 2
// On_serv_upr = {0;1}, where
// 0 - turning off the servo,
// 1 - turning on the servo,
// Start_serv_upr = {0;180}
// Eg_vp_upr = {0;1}, where
//0 - clockwise direction of rotation,
// 1 - direction of rotation counterclockwise
// Ug_pov_upr = {0;180}
// Skor_vr_upr = {0;250}

// A string of servo control parameters:
// 2.1 2.2 2.3 2.4 2.5 2.6
// Id_strok_2;On_serv_upr;Nach_p_serv_upr;Eg_pr_upr;Ug_pov_upr;Skor_vr_upr;

// MEASURING PARAMETERS:
// 3.1) Id_string_3 - Identifier of the string of measuring parameters of sensors
// 3.2) Temp_ism - Measuring temperature
// 3.3) Moist_ism - Measuring humidity
// 3.4) Sound_ism - Measuring sound volume
// 3.5) Light_ism - Measuring light brightness
// 3.6) Vibr_ism - Measuring vibration strength
// 3.7) String_3 - Row of measuring parameters of sensors

// Id_string_3 = 3

// String of measuring parameters of sensors:
// 3.1 3.2 3.3 3.4 3.5 3.6
// Id_strok_3;Temp_ism;Wet_ism;Sound_ism;Light_ism;Vibr_ism;

// 4.1) Id_strok_4 - Id of the string of measuring parameters of the servo
// 4.2) Nach_p_serv_iz - The initial position of the servo measuring
// 4.3) Eg_pr_iz - The direction of rotation of the servo from the initial position measuring
// 4.4) Ug_pov_iz - The angle of rotation of the servo measuring
// 4.5) String_4 - The string of measuring parameters of the servo

// Id_string_4 = 4

// Line of measuring parameters of the servo:
// 4.1 4.2 4.3 4.4 4.5
// Id_strok_4;Nach_p_serv_ism;Eg_pr_ism;Ug_pov_upr;Skor_vr_upr;
 
// PIN D12 - weather sensor connection
// PIN A00 - sound sensor connection
// PIN A03 - light sensor connection
// PIN A05 - vibration sensor connection
// PIN D10 - servo connection

// ------------------ Initial conditions and initial data END

// ------------------ The section connecting external libraries and creating variables is the BEGINNING

#include <DHT.h>
// #include <Servo.h>
#include <VarSpeedServo.h>

DHT dht(12, DHT22);
float ID_Stroka_1; // 1.1) Id_stroka_1 - ID of the row of control parameters of sensors
float Vkl_temp_vl_upr; // 1.2) On_temp_upr - Enabling/disabling temperature measurements
float Vkl_zvuk_upr; // 1.3) On_sound_upr - Enabling/disabling sound measurements
float Vkl_svet_upr; // 1.4) On_light_upr - Enabling/disabling light measurements
float Vkl_vibr_upr; // 1.5) On_vibr_upr - Enabling/disabling vibration measurements
float Per_tem_vl_upr; // 1.6) Per_tem_vl_upr - The period of temperature and humidity measurement.
float Per_zvuk_upr; // 1.7) Per_svuk_upr - The period of sound measurement.
float Per_svet_upr; // 1.8) Per_svet_upr - The light measurement period.
float Per_vibr_upr; // 1.9) Per_vibr_upr - The period of vibration measurement.
float Per_All_upr; // 1.10) Per_all_upr - The measurement period of all sensors.
String Stroka_1; // 1.11) String_1 is a string of sensor control parameters

float id_stro_ka_2; // 2.1) Id_string_2 - ID of the row of control parameters of the servo
float Vkl_serv_upr; // 2.2) On_serv_upr - Turning the servo on/off
float Nach_p_serv_upr;// 2.3) Nach_p_serv_upr - The initial position of the servo control
float Napr_vr_upr; // 2.4) Napr_vr_upr - Direction of rotation of the servo from the initial position control
float ug_pov_upr; // 2.5) Ug_pov_upr - The angle of rotation of the servo control
float skor_vr_upr; // 2.6) skor_vr_upr - The speed of rotation of the servo control
String Stroka_2; // 2.7) String_2 - A string of servo control parameters

float id_stro_ka_3; // 3.1) Id_string_3 - ID of the row of measuring parameters of sensors
float Temp_izm; // 3.2) Temp_izm - Measuring temperature
float Vl_izm; // 3.3) Wet_izm - Measuring humidity
float Zvuk_izm; // 3.4) Zvuk_izm - Measuring sound volume
float Svet_izm; // 3.5) Svet_izm - The brightness of the measuring light
float Vibr_izm; // 3.6) Vibr_izm - Measuring vibration force
String Stro_ka_3; // 3.7) String_3 - Row of measuring parameters of sensors

float ID_Stroka_4; // 4.1) Id_stroka_4 - ID of the string of measuring parameters of the servo
float Nach_p_serv_izm;// 4.2) Nach_p_serv_izm - The initial position of the measuring servo
float Napr_vr_izm; // 4.3) Napr_vr_izm - Direction of rotation of the servo from the initial position measuring
float Ug_pov_izm; // 4.4) Ug_pov_izm - The angle of rotation of the measuring servo
String Stroka_4; // 4.5) String_4 - String of measuring parameters of the servo

float ID_Stroka_5; // 5.1) Id_stroka_5 - ID of the string of parameters of the servo in automatic mode
float Vkl_serv_upr_avt; // 5.2) On_serv_upr_avt - Turning on the servo in automatic mode
String Stroka_6; // 5.3) String_6 - A string of control parameters of the servo in automatic mode
String Stroka_7; // 5.4) String_7 is a string of measuring parameters of the servo in automatic mode

float id_stro_ka_6; // 6.1) Id_string_6 - ID of the line that moves the servo to the initial position
float Vkl_serv_nach_pol; // 6.2) On_serv_nach_pol - Turning on the servo and setting it to the initial position
String Stroka_8; // 6.3) String_8 - A string of control parameters of the servo for its installation in the initial position

int Count_Byte; // The number of bytes received in the COM port
String Stroka_All;

int Index_Poisk_Razdel; // The ordinal number of the current character preceding the separator in the current string consisting of control parameters
int ii; // The ordinal number of atomic values from the current string consisting of control parameters
String Atom_Str; // The current atomic value of a string type from the current string consisting of control parameters
float Atom_Float; // The current atomic value of a real type from the current string consisting of control parameters
float Massiv_Atom[10]; // Array of atomic values from the current string consisting of control parameters
int i; // Counter for all cycles of type "for"

VarSpeedServo ServoMotor; // Servo control object

int Flag; // Controlling parameter that disables and switches separately the operation of sensors and servo
int Status_Napr_vr_upr; // Controlling parameter for calculating the relative direction and angle of rotation
int Tek_pol_ser; // Current position of the servo
int Tek_Nach_pol_ser; // Current position of the servo

// ------------------ Section connecting external libraries and creating variables END

void parse(int len, String string) //command input string parsing function
{
  for (int i=0; i<len; i++)
           {
              Index_Poisk_Razdel = string.indexOf(';', 0);
              Atom_Str = string.substring(0, Index_Poisk_Razdel);
              Atom_Float = Atom_Str.toFloat();
              Massiv_Atom[i] = Atom_Float;
              string.remove(0, Index_Poisk_Razdel+1);
           }
}
void setup()
{ 
  Serial.begin(9600);
  pinMode(12, INPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  dht.begin();
  ServoMotor.attach(10);
  
  ID_Stroka_1 = 0;
  Vkl_temp_vl_upr = 0;
  Vkl_zvuk_upr = 0;
  Vkl_svet_upr = 0;
  Vkl_vibr_upr = 0;
  Per_tem_vl_upr = 0;
  Per_zvuk_upr = 0;
  Per_svet_upr = 0;
  Per_vibr_upr = 0;
  Per_All_upr = 0;
  Stroka_1 = "";

  ID_Stroka_2 = 0;
  Vkl_serv_upr = 0;
  Nach_p_serv_upr = 0;
  Napr_vr_upr = 0;
  ug_pov_upr = 0;
  skor_vr_upr = 0;
  Stroka_2 = "";

  ID_Stroka_3 = 3;
  Temp_izm = 0;
  Vl_izm = 0;
  Zvuk_izm = 0;
  Svet_izm = 0;
  Vibr_izm = 0;
  Stroka_3 = "";

  ID_Stroka_4 = 4;
  Nach_p_serv_izm = 0;
  Napr_vr_izm = 0;
  Ug_pov_izm = 0;
  Stroka_4 = "";

  Count_Byte = 0;
  Stroka_All = "";

  Flag = 0;
  Status_Napr_vr_upr = 0;
  Tek_pol_ser = 0;
  
  ID_Stroka_5 = 0;
  Vkl_serv_upr_avt = 0;
  Stroka_6="";
  Stroka_7="";

  ID_Stroka_6=0;
  Vkl_serv_nach_pol=0;
  Stroka_8="";
}

void loop()
{ 
  Count_Byte = 0;
  if (Serial.available() > 11)
     {
       delay(100);
       Count_Byte = Serial.available();
       Stroka_All = "";
       delay(100);
       Stroka_All = Serial.readString();
     }
     
  if (Stroka_All[0] == '1' && Count_Byte >= 20)
     {
               Flag = 1;
               Stroka_1 = Stroka_All;
                    parse(10,Stroka_1);
                    ID_Stroka_1     = Massiv_Atom[0];
                    Vkl_temp_vl_upr = Massiv_Atom[1];
                    Vkl_zvuk_upr    = Massiv_Atom[2];
                    Vkl_svet_upr    = Massiv_Atom[3];
                    Vkl_vibr_upr    = Massiv_Atom[4];
                    Per_tem_vl_upr  = Massiv_Atom[5];
                    Per_zvuk_upr    = Massiv_Atom[6];
                    Per_svet_upr    = Massiv_Atom[7];
                    Per_vibr_upr    = Massiv_Atom[8];
                    Per_All_upr     = Massiv_Atom[9];
     }               
     else if (Stroka_All[0] == '2' && Count_Byte >= 12)
             {
                Flag = 2;
                Stroka_2 = Stroka_All;
                parse(6,Stroka_2);
                 ID_Stroka_2     = Massiv_Atom[0];
                 Vkl_serv_upr    = Massiv_Atom[1];
                 Nach_p_serv_upr = Massiv_Atom[2];
                 Napr_vr_upr     = Massiv_Atom[3];
                 ug_pov_upr      = Massiv_Atom[4];
                 skor_vr_upr     = Massiv_Atom[5];
              }
      else if (Stroka_All[0] == '3' && Count_Byte >= 12)
      {
        Flag = 3;
         Stroka_6 = Stroka_All;
                parse(2,Stroka_6);
                 ID_Stroka_5     = Massiv_Atom[0];
                 Vkl_serv_upr_avt    = Massiv_Atom[1];
      }
      else if (Stroka_All[0] == '4' && Count_Byte >= 12)
      {
        Flag = 4;
        Stroka_8 = Stroka_All;
        parse(2,Stroka_8);
                 ID_Stroka_6     = Massiv_Atom[0];
                 Vkl_serv_nach_pol    = Massiv_Atom[1];
      }
  if (Flag == 1)
     {
                    if(Vkl_svet_upr==1)
                          {
                               digitalWrite(3, HIGH);
                          }
                    else
                          {
                            digitalWrite(3, LOW);
                          }
                    if(Vkl_vibr_upr==1)
                          {
                             digitalWrite(6, HIGH);
                          }
                    else
                          {
                            digitalWrite(6, LOW);
                          }
                    if(Vkl_zvuk_upr==1)
                          {
                              digitalWrite(5, HIGH);
                          }
                    else
                          {
                            digitalWrite(5, LOW);
                          }
                    if(Vkl_temp_vl_upr==1)
                          {
                              digitalWrite(4, HIGH);
                          }
                    else
                          {
                            digitalWrite(4, LOW);
                          }
               if (Vkl_temp_vl_upr == 1 && Vkl_zvuk_upr == 0 && Vkl_svet_upr == 0 && Vkl_vibr_upr == 0)
                  {
                     Stroka_3 = "";
                     Temp_izm = dht.readTemperature();
                     Vl_izm   = dht.readHumidity();
                     delay (Per_tem_vl_upr*1000);
                     Stroka_3 = String(ID_Stroka_3, 0) + ';' + String(Temp_izm,1) + ';' + String(Vl_izm,1) + ';' + '0' + ';' + '0' + ';' + '0';
                     Stroka_3.replace(" ","");
                     //Serial.print("Stroka_31=");
                     Serial.println(Stroka_3);
                  }
                  else if (Vkl_temp_vl_upr == 0 && Vkl_zvuk_upr == 1 && Vkl_svet_upr == 0 && Vkl_vibr_upr == 0)
                          {
                             Stroka_3 = "";
                             Zvuk_izm = analogRead(0);
                             delay (Per_zvuk_upr*1000);
                             Stroka_3 = String(ID_Stroka_3, 0) + ';' + '0' + ';' + '0' + ';' + String(Zvuk_izm,0) + ';' + '0' + ';' + '0';
                             Stroka_3.replace(" ","");
                             //Serial.print("Stroka_32=");
                             Serial.println(Stroka_3);
                          }
                  else if (Vkl_temp_vl_upr == 0 && Vkl_zvuk_upr == 0 && Vkl_svet_upr == 1 && Vkl_vibr_upr == 0)
                          {
                             Stroka_3 = "";
                             Svet_izm = analogRead(3);
                             delay (Per_svet_upr*1000);
                             Stroka_3 = String(ID_Stroka_3, 0) + ';' + '0' + ';' + '0' + ';' + '0' + ';' + String(Svet_izm,0) + ';' + '0';
                             Stroka_3.replace(" ","");
                             //Serial.print("Stroka_33=");
                             Serial.println(Stroka_3);
                          }
                  else if (Vkl_temp_vl_upr == 0 && Vkl_zvuk_upr == 0 && Vkl_svet_upr == 0 && Vkl_vibr_upr == 1)
                          {
                            Stroka_3 = "";
                            Vibr_izm = analogRead(5);
                            delay (Per_vibr_upr*1000);
                            Stroka_3 = String(ID_Stroka_3, 0) + ';' + '0' + ';' + '0' + ';' + '0' + ';' + '0' + ';' + String(Vibr_izm,0);
                            Stroka_3.replace(" ","");
                            //Serial.print("Stroka_34=");
                            Serial.println(Stroka_3);
                          }
                  else if (Vkl_temp_vl_upr == 1 && Vkl_zvuk_upr == 1 && Vkl_svet_upr == 1 && Vkl_vibr_upr == 1)
                          {
                             Stroka_3 = "";
                             Temp_izm = dht.readTemperature();
                             Vl_izm   = dht.readHumidity();
                             Zvuk_izm = analogRead(0);
                             Svet_izm = analogRead(3);
                             Vibr_izm = analogRead(5);
                             delay (Per_All_upr*1000);
                             Stroka_3 = String(ID_Stroka_3, 0) + ';' + String(Temp_izm,1) + ';' + String(Vl_izm,1) + ';' + String(Zvuk_izm,0) + ';' + String(Svet_izm,0) + ';' + String(Vibr_izm,0) + ';';
                             Stroka_3.replace(" ","");
                             //Serial.print("Stroka_35=");
                             Serial.println(Stroka_3);
                          }
                          
     }
        else if (Flag == 2)                
                {
                  if (Vkl_serv_upr == 1)
                     {
                      digitalWrite(7, HIGH);
                        Stroka_4 = "";
                        if (Napr_vr_upr == 1)
                           {
                              Status_Napr_vr_upr = 1;
                           }
                           else if (Napr_vr_upr == 0)
                                   {
                                      Status_Napr_vr_upr = -1;
                                   }
                        if ((Status_Napr_vr_upr == -1 && ug_pov_upr <= Nach_p_serv_upr && ug_pov_upr > 0 && Nach_p_serv_upr != 0) ||
                            (Status_Napr_vr_upr == 1  && ug_pov_upr <= (180 - Nach_p_serv_upr) && ug_pov_upr > 0 && Nach_p_serv_upr != 180))
                           {
                              if (Nach_p_serv_upr != Tek_Nach_pol_ser)
                                 {
                                    ServoMotor.write(Nach_p_serv_upr, skor_vr_upr, true);
                                    Nach_p_serv_izm = ServoMotor.read();
                                    delay(1000);
                                 }
                              ServoMotor.write(Nach_p_serv_upr + ug_pov_upr*Status_Napr_vr_upr, skor_vr_upr, true);
                              Tek_pol_ser = ServoMotor.read();
                              if (Tek_pol_ser < Nach_p_serv_upr)
                                 {
                                    Napr_vr_izm = 0;
                                 }
                                 else if (Tek_pol_ser > Nach_p_serv_upr)
                                         {
                                            Napr_vr_izm = 1;
                                         }
                              Ug_pov_izm = abs(Tek_pol_ser - Nach_p_serv_upr);
                              Stroka_4 = String(ID_Stroka_4, 0) + ';' + String(Nach_p_serv_izm,0) + ';' + String(Napr_vr_izm,0) + ';' + String(Ug_pov_izm,0)+';'+ String(skor_vr_upr,0)+';';
                              Stroka_4.replace(" ","");
                              //Serial.print("Stroka_4=");
                              Serial.println(Stroka_4);
                              Tek_Nach_pol_ser = Nach_p_serv_upr;
                           }
                              else if (Status_Napr_vr_upr == -1 && ug_pov_upr > (180 - Nach_p_serv_upr) || Nach_p_serv_upr == 0)
                                 {
                                    Serial.println ("For a given clockwise rotation direction:");
                                    Serial.println ("the rotation angle is set to be greater than the initial position or");
                                    Serial.println ("the initial position is set equal to the boundary position - zero degrees.");
                                 }
                                 else if (Status_Napr_vr_upr == 1 && ug_pov_upr > Nach_p_serv_upr || Nach_p_serv_upr == 180)
                                         {
                                           Serial.println ("При заданном направлении вращения против часовой стрелки:");
                                           Serial.println ("задан угол поворота больше 180 градусов или");
                                           Serial.println ("задано начальное положение, равное граничному положению - 180 градусам.");
                                         }
                                 else if (ug_pov_upr == 0)
                                         {
                                            Serial.println ("Задан угол поворота, равный нулю градусов");
                                         }                            
                           }
                           else
                              digitalWrite(7, LOW);
                        Flag = 0;    
                     }
          else if(Flag==3)
          {
            if (Vkl_serv_upr_avt == 1)
                     {
                      digitalWrite(7, HIGH);
                      Stroka_7="";
                      ServoMotor.write(0, 250, true);
                      delay(1000);
                      ServoMotor.write(140, 100, true);
                      Stroka_7 = "5;0;1;140;100;";
                      Serial.println(Stroka_7);
                      delay(1000);
                      ServoMotor.write(30, 50, true);
                      Stroka_7 = "5;140;0;110;50;";
                      Serial.println(Stroka_7);
                      delay(1000);
                      ServoMotor.write(180, 250, true);
                      Stroka_7 = "5;30;1;150;250;";
                      Serial.println(Stroka_7);
                      delay(1000);
                      ServoMotor.write(0, 150, true);
                      Stroka_7 = "5;180;0;180;150;";
                      Serial.println(Stroka_7);
                      delay(1000);
                      ServoMotor.write(60, 10, true);
                      Stroka_7 = "5;0;1;60;10;";
                      Serial.println(Stroka_7);
                     }
                else
                  digitalWrite(7, LOW);
            Flag = 0; 
          }           
       else if(Flag==4)
       {
        if(Vkl_serv_nach_pol==1)
            ServoMotor.write(0, 250, true);
            Flag = 0;
        }             
}
